#! /bin/sh
### BEGIN INIT INFO
# Provides:          beacons-controller
# Required-Start:    $remote_fs $syslog
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: Beacons controller
# Description:       Beacons controller. 
### END INIT INFO

# Author: Eric Pascual <eric.pascual@cstb.fr>

PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="Beacons demonstrator controller"
NAME=beacons-controller
DAEMON=/home/pi/beacons-demo/beacons-controller.py
DAEMON_ARGS=""
INIT_VERBOSE=yes

VARRUN=/var/run/
VARLOG=/var/log/

PIDFILE=$VARRUN/$NAME.pid
LOGFILE=$VARLOG/$NAME.log
SCRIPTNAME=/etc/init.d/$NAME

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions

#
# Function that starts the daemon/service
#
do_start()
{
	log_daemon_msg "Starting $DESC" "$NAME"
	# Return
	# 0 if daemon has been started
	# 1 if daemon was already running
	# 2 if daemon could not be started
	if [ -f $PIDFILE ] ; then
		echo -n " already started"
		RETVAL=1
	else
		echo "-------- Starting service $NAME at $(date)" > $LOGFILE
		$DAEMON $DAEMON_ARGS >> $LOGFILE 2>&1 &
		pid=$!
		RETVAL="$?"

		# check if the process didn't hang during startup by testing if its
		# is still alive after the normal start delay 
		sleep 1
		pgrep -f $DAEMON > /dev/null && echo $pid > $PIDFILE || RETVAL=2
	fi

	case "$RETVAL" in
		0|1) log_progress_msg "started" ; log_success_msg ;;
		2) log_failure_msg ;; 
	esac

	return $RETVAL
}

#
# Function that stops the daemon/service
#
do_stop()
{
	log_daemon_msg "Stopping $DESC" "$NAME"
	# Return
	# 0 if daemon has been stopped
	# 1 if daemon was already stopped
	# 2 if daemon could not be stopped
	# other if a failure occurred
	if [ -f $PIDFILE ] ; then
		echo "" >> $LOGFILE
		echo "-------- Stopping service $NAME at $(date)" >> $LOGFILE
		read pid < $PIDFILE
		kill $pid 2> /dev/null
		RETVAL="$?"
	else
		RETVAL=1
	fi
	case "$RETVAL" in
		0|1) log_progress_msg "stopped" ; log_success_msg ;;
		2) log_failure_msg ;; 
	esac

	rm -f $PIDFILE
	return "$RETVAL"
}

case "$1" in
	start)
		do_start
		;;
	stop)
		do_stop
		;;
	status)
		pgrep -c -f $DAEMON > /dev/null
		case "$?" in
		  0) echo "$NAME is running" ; exit 0 ;;
		  *) echo "$NAME is not running" ; exit 1 ;;
		esac
		;;
	restart|force-reload)
		do_stop
		case "$?" in
			0|1)
				do_start
				;;
			*)
				# Failed to stop
				log_failure_msg 
				;;
		esac
		;;
	*)
		echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
		exit 3
		;;
esac

